Changelog
=========

Unreleased yet
--------------

ADDED

-  Middlewares support;
-  New environment variable for Request/Middleware Handlers:
   ``MOCK_REQUEST_NTH``;

0.8.1
-----

ADDED

-  New condition option: ``route_param_match``

.. _section-1:

0.8.0
-----

ADDED

-  ``nth`` condition option: Conditional responses can be set based on
   their position in the request history.

.. _section-2:

0.7.0
-----

ADDED

-  Responses with ``exec:<SHELL COMMAND>`` is now supported;
-  Endpoints can now be defined through command-line parameters, such
   as:
   ``--route foo/bar --method post --status-code 201 --response "Hello world!"``;

CHANGED

-  The ``--config`` command-line parameter is no longer mandatory since
   now endpoints can be defined without configuration files;

FIXED

-  Defining responses referenced through files with absolute path fails.
   (with relative file paths no issues, only absolute);

.. _section-3:

0.6.0
-----

ADDED

-  Responses can now read environment variables. Previously only
   shell-script responses had that ability - now any kind of response,
   either file or static text can achieve the same. Check *Reading
   Environment Variables* in the User Guide.
-  New variable added to read current request’s host
   ``MOCK_REQUEST_HOST``.

.. _section-4:

0.5.0
-----

Breaking changes

-  “Endpoint Parameters” has been renamed to “Route Parameters”

Example - reading a parameter named ``foo``:

Before: ``MOCK_REQUEST_ENDPOINT_PARAM_FOO``

Now: ``MOCK_ROUTE_PARAM_FOO``

Check the User Guide for more details.

Features & enhancements

-  Route Parameters can be captured in the Response string. Before, the
   parameters could only be read by Shell Scripts Responses. A response
   can now be set as follows:

.. code:: json

   {
     "endpoints": [
       {
         "route": "book/{book_name}",
         "method": "GET",
         "response": "file:./books/${book_name}.txt"
       }
     ]
   }

-  Static files support, with ``fs:./path/to/files``;
-  Endpoints can be configured without any HTTP Method - it will default
   to ``GET``;

.. _section-5:

0.4.0
-----

Additions:

-  New Request Handler Variable added: ``MOCK_HOST`` for retrieving the
   current host that the Mock server is listening on.
-  Enable JSON Responses to include environment variables, which
   previously could only be read by Shell Script responses.

Bugs fixed:

-  Trying to assert with “Json Body” on a Request that didn’t have any
   payload would result in 500 Status Code API Error;

.. _section-6:

0.3.0
-----

-  Endpoint Routes can now contain wildcards or placeholder variables;
-  Shell Script Response Handlers now support params, such as:
   ``"response": "sh:./my_shell_script.sh some_param another_param"``;
-  ``--delay`` option added enabling you to simulate slow APIs;

.. _section-7:

0.2.0
-----

-  Endpoint responses from shell scripts are now supported (with
   ``sh:some_handler.sh``). Read the User Guide for more details;
-  ``--cors`` option added to facilitate usage with webapps;

Minor stuff:

-  When trying to reference response files that do not exist, *mock* now
   prevents starting and shows error, failing gracefully.

.. _section-8:

0.1.4
-----

-  The *mock* installable Go library has existed before this release but
   now it is documented in the User Guide. Add
   ``github.com/dhuan/mock/pkg/mock`` to your Go project and write tests
   with it.
-  Helper function ``ToReadableError()`` added in the library to
   stringify a group of Validation Errors.
-  Bug fixed - HTTP Method value in Assertion now works independently of
   case sensitiveness.

Minor stuff:

-  Fail gracefully if given configuration file does not exist or/and not
   readable.

.. _section-9:

0.1.3
-----

This release fixes a bug in the ``json_body_match`` condition option.

.. _section-10:

0.1.2
-----

This release doesn’t have significant changes.

.. _section-11:

0.1.1
-----

Features:

-  ``querystring_exact_match`` Assertion Matcher added;

.. _section-12:

0.1.0
-----

Features:

-  The ``querystring`` assertion matcher was added. You can now assert
   that a request was made with the desired Querystring values and keys.

General improvements and stability:

-  Log messages are shown with timestamps.
-  Proper error handling when unable to start up the server.

Bugs fixed:

-  Trying to make assertions with a ``nth`` out of range would result in
   panicking the server. Mock now returns a proper validation error on
   the assert request indicating that the given ``nth`` is out of range.
